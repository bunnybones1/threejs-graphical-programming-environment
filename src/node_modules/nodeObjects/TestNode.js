var THREE = require('three');

var Label = require('./Label');

var AttachmentPoint = require('./AttachmentPoint');

var __geometry;
function __getGeometry() {
	if(!__geometry) {
		__geometry = new THREE.SphereGeometry(0.5, 32, 16);
	}
	return __geometry;
}

var __material;
function __getMaterial() {
	if(!__material) {
		__material = new THREE.MeshBasicMaterial({
			color: new THREE.Color(0.6, 0.6, 0.6)});
	}
	return __material;
}

var __materialHighlight;
function __getMaterialHighlight() {
	if(!__materialHighlight) {
		__materialHighlight = new THREE.MeshBasicMaterial({
			color: new THREE.Color(0.8, 0.8, 0.6)});
	}
	return __materialHighlight;
}

var __angleRatioSpacing = 1 / 16;
var __angleRatioSpacingHalf = __angleRatioSpacing * 0.5;
function TestNode(inputCount, outputCount) {
	inputCount = inputCount || 1;
	outputCount = outputCount || 1;

	var inputs = [];
	var outputs = [];

	THREE.Mesh.call(this, __getGeometry(), __getMaterial());
	for (var i = 0; i < inputCount; i++) {
		var angleRatio = i * __angleRatioSpacing + (0.25 - (inputCount - 1) * __angleRatioSpacingHalf);
		inputs.push(this.addAttachmentPoint(angleRatio));
	}
	for (var i = 0; i < outputCount; i++) {
		var angleRatio = i * __angleRatioSpacing + ( - 0.25 - (outputCount - 1) * __angleRatioSpacingHalf);
		outputs.push(this.addAttachmentPoint(angleRatio));
	}

	var label = new Label('TEST');
	label.scale.multiplyScalar(0.01);
	label.scale.y *= -1;

	this.add(label);

	this.inputs = inputs;
	this.outputs = outputs;
}

TestNode.prototype = Object.create(THREE.Mesh.prototype);

TestNode.prototype.highlight = function() {
	this.material = __getMaterialHighlight();
};

TestNode.prototype.unhighlight = function() {
	this.material = __getMaterial();
};

TestNode.prototype.addAttachmentPoint = function(angleRatio) {
	var attachmentPoint = new AttachmentPoint();
	var angle = angleRatio * Math.PI * 2;
	attachmentPoint.position.set(Math.cos(angle) * 0.5, Math.sin(angle) * 0.5, 0);
	this.add(attachmentPoint);
	return attachmentPoint;
};

TestNode.prototype.updateValue = function(value) {
	this.outputs.forEach(function(output) {
		output.updateValue(value);
	});
};

module.exports = TestNode;
