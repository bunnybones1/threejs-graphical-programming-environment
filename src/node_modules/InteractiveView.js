var THREE = require('three');
var View = require('threejs-managed-view').View;
var Pointers = require('input-unified-pointers');
var MouseWheel = require('input-mousewheel');
var Controller = require('threejs-camera-controller-pan-zoom-unified-pointer');
var tweener = require('raf-tweener');

function InteractiveView() {
	var view = new View({
		useRafPolyfill: false
	});
	view.renderer.setClearColor(0x8f9fbf);

	// console.warn('NOTE: skipping frames to save battery life while developing while travelling ;). target is 6fps.');
	// view.renderManager.skipFrames = 10;

	var scene = view.scene;
	var camera = view.camera;
	camera.rotation.set(0, 0, 0);

	var pointers = new Pointers(view.canvas);
	var mouseWheel = new MouseWheel(view.canvas);

	var controller = new Controller({
		camera: camera,
		tweener: tweener,
		fovMin: 50,
		fovMax: 60,
		panSpeed: 0.2,
		pointers: pointers,
		mouseWheel: mouseWheel,
		autoSetCamera: false
	});
	controller.setState(true);

	view.onResizeSignal.add(controller.setSize);
	var size = view.getSize();
	controller.setSize(size.width, size.height);

	var otherCamera = new THREE.PerspectiveCamera();
	otherCamera.updateProjectionMatrix();

	function setOtherCameraSize(w, h) {
		otherCamera.setViewOffset(
			w,
			h,
			w * 0.25,
			h * 0.25,
			w * 0.5,
			h * 0.5
		);
	}
	setOtherCameraSize(size.width, size.height);
	view.onResizeSignal.add(setOtherCameraSize);

	view.renderManager.onEnterFrame.add(function(){
		controller.precomposeViewport(otherCamera);
	});

	this.pointers = pointers;
	this.scene = scene;
	this.camera = camera;
	this.size = view.domSize;
	this.view = view;
}

module.exports = InteractiveView;
