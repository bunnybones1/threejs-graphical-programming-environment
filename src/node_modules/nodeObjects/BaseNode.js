var THREE = require('three');

var Label = require('./Label');

var AttachmentPoint = require('./AttachmentPoint');
var OutputAttachmentPoint = require('./OutputAttachmentPoint');

var __radius = 0.5;
var __geometry;

function noTransform(a) {
	return a;
}

function __getGeometry() {
	if(!__geometry) {
		__geometry = new THREE.SphereGeometry(__radius, 32, 16);
	}
	return __geometry;
}

var __materials = {};
function __getMaterial(color) {
	if(!(color instanceof THREE.Color)) {
		color = new THREE.Color(color);
	};
	var colorString = color.getHexString();
	if(!__materials[colorString]) {
		__materials[colorString] = new THREE.MeshBasicMaterial({
			color: color
		});
	}
	return __materials[colorString];
}

var __angleRatioSpacing = 1 / 16;
var __angleRatioSpacingHalf = __angleRatioSpacing * 0.5;

var __colorNormal = new THREE.Color(0.6, 0.6, 0.6);
var __colorHighlight = new THREE.Color(0.8, 0.8, 0.6);
function BaseNode() {
	this.colorNormal = this.colorNormal || __colorNormal;
	this.colorHighlight = this.colorHighlight || __colorHighlight;
	THREE.Mesh.call(this, __getGeometry(), __getMaterial(this.colorNormal));

	this.cachedArguments = [];
	this.transformMethod = noTransform;

	var label = new Label('TEST');
	label.scale.multiplyScalar(0.01);
	label.scale.y *= -1;

	this.add(label);

	this.label = label;
	this.inputs = [];
	this.outputs = [];
}

BaseNode.prototype = Object.create(THREE.Mesh.prototype);


var __angleOffsets = {
	inputs: 0.25,
	outputs: -0.25
};

BaseNode.prototype.addInput = function() {
	var attachmentPoint = this.addAttachmentPoint(AttachmentPoint);
	attachmentPoint.updateValue = this.updateInput.bind(this, this.inputs.length);
	this.inputs.push(attachmentPoint);
	this.layout(this.inputs, __angleOffsets.inputs);
	return attachmentPoint;
};

BaseNode.prototype.addOutput = function() {
	var attachmentPoint = this.addAttachmentPoint(OutputAttachmentPoint);
	this.outputs.push(attachmentPoint);
	this.layout(this.outputs, __angleOffsets.outputs);
	return attachmentPoint;
};

BaseNode.prototype.removeInput = function() {
	var attachmentPoint = this.inputs.pop();
	attachmentPoint.parent.remove(attachmentPoint);
};

BaseNode.prototype.layout = function(attachmentPoints, angleOffset) {
	var count = attachmentPoints.length;
	for (var i = 0; i < count; i++) {
		var angleRatio = i * __angleRatioSpacing + (angleOffset - (count - 1) * __angleRatioSpacingHalf);
		var angle = angleRatio * Math.PI * 2;
		attachmentPoints[count-i-1].position.set(Math.cos(angle) * __radius, Math.sin(angle) * __radius, 0);
	}
};

BaseNode.prototype.highlight = function() {
	this.material = __getMaterial(this.colorHighlight);
};

BaseNode.prototype.unhighlight = function() {
	this.material = __getMaterial(this.colorNormal);
};

BaseNode.prototype.addAttachmentPoint = function(AttachmentPointClass) {
	var attachmentPoint = new AttachmentPointClass();
	this.add(attachmentPoint);
	return attachmentPoint;
};

BaseNode.prototype.updateInput = function(i, value) {
	this.cachedArguments[i] = value;
	if(i === 0) {
		this.updateOutput();
	}
};

BaseNode.prototype.updateOutput = function() {
	var result = this.transformMethod.apply(this, this.cachedArguments);
	this.outputs.forEach(function(output) {
		output.dispatch(result);
	});
	this.outputValue = result;
};

module.exports = BaseNode;
