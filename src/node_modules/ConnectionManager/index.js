var THREE = require('three');

var Connection = require('./Connection');

function ConnectionManager(app) {
	this.app = app;
}

ConnectionManager.prototype.connect = function(fromObj, toObj) {
	if(this.getCommonConnections(fromObj, toObj).length > 0) {
		console.warn('already connected');
		return false;
	}
	if(fromObj.temporary || toObj.temporary) {
		//nothing
	} else if(fromObj.dispatch && toObj.updateValue) {
		//nothing
	} else if(fromObj.updateValue && toObj.dispatch) {
		var temp = fromObj;
		fromObj = toObj;
		toObj = temp;
	} else {
		console.warn('You can only connect inputs to outputs.');
		return;
	}
	var connection = new Connection(fromObj, toObj);
	if(fromObj.dispatch) {
		fromObj.dispatch(fromObj.parent.outputValue);
	}
	this.app.view.scene.add( connection );
	return connection;
};

ConnectionManager.prototype.getCommonConnections = function(fromObj, toObj) {
	return fromObj.connections.filter(function(fromConnection) {
		return fromConnection.nodes.indexOf(toObj) !== -1;
	});
};
ConnectionManager.prototype.disconnect = function(fromObj, toObj) {
	var commonConnections = this.getCommonConnections(fromObj, toObj);
	if(commonConnections.length === 1) {
		var connection = commonConnections[0];
		fromObj.connections.splice(fromObj.connections.indexOf(connection), 1);
		toObj.connections.splice(toObj.connections.indexOf(connection), 1);
		connection.parent.remove(connection);
	} else if(commonConnections.length > 1) {
		throw new Error('This object is hyperconnected. Prevent hyperconnections please.');
	}
};

module.exports = ConnectionManager;
